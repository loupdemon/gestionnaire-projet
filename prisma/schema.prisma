// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// modele utilisateur 
model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  tasks        Task[]
  createdTasks Task[]       @relation("CreatedTasks")
  projects     Project[]    @relation("UserProjects")  // les projets de l'utilisaeur qu'il a crée
  userProjects ProjectUser[]   // liste de sprojets auxquels l'utilisateur appartient
}

// modèle projet
model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       Task[]
  inviteCode  String       @unique  //code validation qui sera généré automatiquement et qui caractérisera un projet
  createdById String               // qui l'a créé
  createdBy   User         @relation("UserProjects", fields: [createdById], references: [id])
  users       ProjectUser[]   // un tableau d'utilisateurs
}

model Task {
  id                  String   @id @default(uuid())
  name                String
  description         String
  status              String   @default("To Do")
  dueDate             DateTime?
  projectId           String
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                User?    @relation(fields: [userId], references: [id])
  userId              String?
  createdById         String
  createdBy           User     @relation("CreatedTasks", fields: [createdById], references: [id])
  solutionDescription String?
}

model ProjectUser {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@unique([userId, projectId])   // un tuilsateur ne peut pas appartenir deux fois au projet
}